class Solution(object):
    def wallsAndGates(self, rooms):
        """
        :type rooms: List[List[int]]
        :rtype: None Do not return anything, modify rooms in-place instead.
        """
        if not rooms:
            return
        m = len(rooms)
        n = len(rooms[0])
        for idx1 in range(m):
            for idx2 in range(n):
                if rooms[idx1][idx2] == 0:
                    queue = collections.deque([])
                    visited = set()
                    queue.append((idx1-1,idx2,1))
                    
                    queue.append((idx1,idx2+1,1))
                    queue.append((idx1+1,idx2,1))
                    queue.append((idx1,idx2-1,1))
                    while queue:
                        x,y,val = queue.popleft()
                        if x < 0 or x >= m or y < 0 or y >= n or rooms[x][y] in [0,-1] or (x,y) in visited:
                            continue
                        visited.add((x,y))
                        rooms[x][y] = min(rooms[x][y],val)
                        queue.append((x+1, y, val+1)); queue.append((x-1, y, val+1))
                        queue.append((x, y+1, val+1)); queue.append((x, y-1, val+1))